/* 
 * The MIT License
 *
 * Copyright 2015 Christian Plonka.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.annotation.trigram;

import com.jspmm.matrix.CCSMatrix;
import com.jspmm.matrix.CRSMatrix;
import com.jspmm.matrix.MutableCOOMatrix;
import com.jspmm.util.CCSStreamMatrix;
import com.jspmm.util.CRSStreamMatrix;
import com.jspmm.util.Util;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.TreeSet;
import javax.swing.AbstractAction;
import javax.swing.DefaultListModel;
import javax.swing.UIManager;

/**
 *
 * @author Christian Plonka (cplonka81@gmail.com)
 */
public class AnnotationView extends javax.swing.JFrame {

    final File tmpDir = new File(System.getProperty("java.io.tmpdir"));
    final File sFile = new File(tmpDir, "sentence.txt");
    final File tFile = new File(tmpDir, "terms.txt");
    final DefaultListModel<Rank> lmRanks = new DefaultListModel<>();

    public AnnotationView() {
        initComponents();
        initOwnComponents();
    }

    private void initOwnComponents() {
        jb_calculate.setAction(new CalculateAction());
        if (sFile.exists()) {
            try (InputStream in = new FileInputStream(sFile)) {
                jta_sentence.setText(Util.readContent(in));
            } catch (Exception e) {
            }
        }
        if (tFile.exists()) {
            try (InputStream in = new FileInputStream(tFile)) {
                jta_terms.setText(Util.readContent(in));
            } catch (Exception e) {
            }
        }
        jl_rank.setModel(lmRanks);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jta_sentence = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jta_terms = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jb_calculate = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jl_rank = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Sentences"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jta_sentence.setColumns(20);
        jta_sentence.setRows(5);
        jScrollPane1.setViewportView(jta_sentence);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Terms"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jta_terms.setColumns(20);
        jta_terms.setRows(5);
        jta_terms.setPreferredSize(new java.awt.Dimension(120, 94));
        jScrollPane2.setViewportView(jta_terms);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jb_calculate.setText("jButton1");
        jPanel3.add(jb_calculate);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Rank"));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jl_rank.setPreferredSize(new java.awt.Dimension(120, 80));
        jScrollPane3.setViewportView(jl_rank);

        jPanel4.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel4, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AnnotationView view = new AnnotationView();
                view.setSize(800, 600);
                view.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton jb_calculate;
    private javax.swing.JList jl_rank;
    private javax.swing.JTextArea jta_sentence;
    private javax.swing.JTextArea jta_terms;
    // End of variables declaration//GEN-END:variables

    class CalculateAction extends AbstractAction {

        TermMatrix termMatrix;
        SentenceMatrix sentenceMatrix;

        public CalculateAction() {
            super("calculate..");
        }

        @Override
        public void actionPerformed(ActionEvent ae) {
            String sString = jta_sentence.getText().replaceAll("\\s+", " ");
            String tString = jta_terms.getText();
            if (sString.isEmpty() || tString.isEmpty()) {
                return;
            }
            //
            setEnabled(false);
            try {
                //write out
                writeString(sFile, sString, false);
                writeString(tFile, tString, true);
                //load into term and sentence matrix
                File tmFile = new File(tmpDir, "terms_ccs.mat");
                File smFile = new File(tmpDir, "sentense_crs.mat");
                termMatrix = new TermMatrix();
                termMatrix.generate(tFile.getAbsolutePath(), tmFile.getAbsolutePath());
                //sentence matrix                
                sentenceMatrix = new SentenceMatrix(termMatrix.getGramIdx());
                sentenceMatrix.generate(sFile.getAbsolutePath(), smFile.getAbsolutePath());

                //load and calculate matrix
                CRSMatrix crs = CRSStreamMatrix.readCRSMatrix(smFile.getAbsolutePath());
                CCSMatrix ccs = CCSStreamMatrix.readCCSMatrix(tmFile.getAbsolutePath());
                //
                MutableCOOMatrix ret = crs.multiply(ccs, MutableCOOMatrix.class);
                System.out.println(ret.nrow + " " + ret.ncol);

                //update rank list
                TreeSet<Rank> sorted = new TreeSet<>();
                for (int i = 0; i < ret.nrow; i++) {
                    for (int j = 0; j < ret.ncol; j++) {
                        float v = ret.get(i, j);
                        if (v != 0) {
                            sorted.add(new Rank(termMatrix.getTerm(j), v));
                        }
                    }
                }
                //
                lmRanks.removeAllElements();
                for (Iterator<Rank> it = sorted.descendingIterator(); it.hasNext();) {
                    lmRanks.addElement(it.next());
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                setEnabled(true);
            }
        }
    }

    static void writeString(File file, String value, boolean seperate) {
        try (PrintWriter out = new PrintWriter(file)) {
            if (seperate) {
                String[] split = value.split("\\s+");
                for (String line : split) {
                    out.println(line);
                }
            } else {
                out.write(value);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static class Rank implements Comparable<Rank> {

        final String term;
        final float value;

        public Rank(String term, float value) {
            this.term = term;
            this.value = value;
        }

        @Override
        public int compareTo(Rank t) {
            int ret = Float.compare(value, t.value);
            return ret == 0 ? -1 : ret;
        }

        @Override
        public String toString() {
            return String.format("%s [%s]", term, value);
        }
    }
}
